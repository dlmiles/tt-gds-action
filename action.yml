name: 'Tiny Tapeout GDS Action'
description: 'This action builds a GDS file from your Tiny Tapeout project'
branding:
  color: purple
  icon: layers

runs:
  using: 'composite'
  steps:
    - name: Set up environment variables
      shell: bash
      run: |
        # REMINDER: When updating the OpenLane version do not forget to change the PDKs used for
        #           other actions in this repository gl_test/action.yml and eqy_test/action.yml
        #           PDK_VERSION=1341f54f5ce0c4955326297f235e4ace1eb6d419
        #           PDK_DATE=2023.08.27
        cat << EOF >> $GITHUB_ENV
        OPENLANE_TAG=2023.09.11
        OPENLANE_IMAGE_NAME=efabless/openlane:7e5a2e9fb274c0a100b4859a927adce7089455ff
        OPENLANE_ROOT=/home/runner/openlane
        PDK_ROOT=/home/runner/pdk
        PDK=sky130A
        EOF

    # Install packages for 'Render PNG from GDS' step:
    - name: Install prerequisites
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: librsvg2-bin pngquant # librsvg2-bin for rsvg-convert; pngquant for heavy PNG compression.
        version: tt05 # I think naming a version builds a reusable packages cache for that name.

    - name: Checkout tt-support-tools repo
      uses: actions/checkout@v3
      with:
        repository: tinytapeout/tt-support-tools
        path: tt
        ref: tt05

    - name: Setup python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip' # caching pip dependencies

    # Thanks: https://github.com/yaml/pyyaml/issues/601#issuecomment-1638509577
    # See: https://github.com/yaml/pyyaml/issues/601
    #
    ## This was just to prove inside GHA this sequence will successfully install pyyaml-5.4.1
    #
    ##
    #- name: 'Hotfix: yyaml + Cython>=3'
    #  shell: bash
    #  run: |
    #    set | grep PYTHON || true
    #    python -VV
    #    python -h
    #
    #     pip install "Cython<3.0" "wheel==0.40.0" "pyinstaller==5.13.0" "pyinstaller-hooks-contrib==2023.5" "install==1.3.5" "setuptools" --no-build-isolation
    #    pip install "mccabe==0.6.1" "mypy-extensions==1.0.0" "pathspec==0.11.1" "platformdirs==3.9.1" "tomli==2.0.1" --no-build-isolation
    #    pip install "XlsxWriter==3.0.9" "altgraph==0.17.3" "black==22.3.0" "click==8.1.5" "cmake==3.26.4" --no-build-isolation
    #    pip install "flake8==4.0.1" "flake8-no-implicit-concat==0.3.3" "pycodestyle==2.8.0" "pyflakes==2.4.0" --no-build-isolation
    #
    #    python -VV
    #
    #    #"pyyaml<6" --no-build-isolation # new line
    #    pip install "pyyaml<6" --no-build-isolation
    #    #pip install -r requirements.txt # original build step, which has pyyaml in it

    - name: Install tt-support-tools dependencies
      shell: bash
      run: pip install -r tt/requirements.txt

    - name: Fetch verilog and build config
      shell: bash
      run: ./tt/tt_tool.py --create-user-config

    - name: Install OpenLane
      shell: bash
      run: |
        git clone --depth=1 --branch $OPENLANE_TAG https://github.com/The-OpenROAD-Project/OpenLane.git $OPENLANE_ROOT
        cd $OPENLANE_ROOT

        curl -s -o ./openlane_2023.06.26.patch "https://raw.githubusercontent.com/dlmiles/tt-gds-action/tt04/openlane_2023.06.26.patch"
        patch -p1 < ./openlane_2023.06.26.patch

        curl -s -o ./hotfix_pyyaml.sh "https://raw.githubusercontent.com/dlmiles/tt-gds-action/tt04/hotfix_pyyaml.sh"
        chmod a+x hotfix_pyyaml.sh

        make

    - name: Make GDS with OpenLane
      shell: bash
      run: ./tt/tt_tool.py --harden

    - name: Show build files (for debugging)
      shell: bash
      run: find runs/wokwi/

    - name: Linter output
      if: always()
      shell: bash
      run: |
        if [ -s runs/wokwi/logs/synthesis/linter.log ]; then
          echo "# Linter output"  >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Print each line of the file preceeded by four spaces:
          sed 's/^/    /' < runs/wokwi/logs/synthesis/linter.log >> $GITHUB_STEP_SUMMARY
        fi

    - name: Yosys warnings
      shell: bash
      run: ./tt/tt_tool.py --print-warnings >> $GITHUB_STEP_SUMMARY

    - name: Routing summary
      shell: bash
      run: ./tt/tt_tool.py --print-stats >> $GITHUB_STEP_SUMMARY

    - name: Cell usage summary
      shell: bash
      run: ./tt/tt_tool.py --print-cell-category >> $GITHUB_STEP_SUMMARY

    - name: Publish build logs
      if: success() || failure()
      uses: actions/upload-artifact@v3
      with:
        name: GDS_logs
        path: |
          src/*
          runs/wokwi/*

    - name: Publish GDS artifact
      uses: actions/upload-artifact@v3
      with:
        name: GDS
        path: |
          src/*
          runs/wokwi/results/final/*
          runs/wokwi/reports/metrics.csv
          runs/wokwi/reports/synthesis/1-synthesis*
          runs/wokwi/OPENLANE_VERSION
          runs/wokwi/PDK_SOURCES
          runs/wokwi/config.tcl
          LICENSE

    # Create and store PNG...
    - name: Render PNG from GDS
      shell: bash
      run: './tt/tt_tool.py --create-png 2>&1 || echo "WARNING: Failed to render PNG preview from GDS; error $?"'

    - name: Upload gds_render (png) artifact
      uses: actions/upload-artifact@v3
      with:
        name: gds_render
        path: 'gds_render.png'
