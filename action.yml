name: 'Tiny Tapeout GDS Action'
description: 'This action builds a GDS file from your Tiny Tapeout project'
branding:
  color: purple
  icon: layers

inputs:
  OPENLANE_TAG:
    description: 'OPENLANE_TAG (e.g. 2023.09.11) ?'
    required: true
    default: '2023.09.11'
  OPENLANE_IMAGE_NAME:
    description: 'OPENLANE_IMAGE_NAME (e.g. efabless/openlane:7e5a2e9fb274c0a100b4859a927adce7089455ff) ?'
    required: false
    default: 'efabless/openlane:7e5a2e9fb274c0a100b4859a927adce7089455ff'

runs:
  using: 'composite'
  steps:
    - name: Set up environment variables
      env:
        OPENLANE_TAG:         ${{ inputs.OPENLANE_TAG }}
        OPENLANE_IMAGE_NAME:  ${{ inputs.OPENLANE_IMAGE_NAME  }}
      shell: bash
      run: |
        # Might as well try this as well
        test -n "$OPENLANE_TAG"        || export OPENLANE_TAG="2023.06.26"
        test -n "$OPENLANE_IMAGE_NAME" || export OPENLANE_IMAGE_NAME="efabless/openlane:3bc9d02d0b34ad032921553e512fbe4bebf1d833"
        test -n "$OPENLANE_ROOT"       || export OPENLANE_ROOT="/home/runner/openlane"
        test -n "$PDK_ROOT"            || export PDK_ROOT="/home/runner/pdk"
        test -n "$PDK"                 || export PDK="sky130A"

        echo "OPENLANE_TAG=$OPENLANE_TAG" >> $GITHUB_ENV
        echo "OPENLANE_IMAGE_NAME=$OPENLANE_IMAGE_NAME" >> $GITHUB_ENV
        echo "OPENLANE_ROOT=$OPENLANE_ROOT" >> $GITHUB_ENV
        echo "PDK_ROOT=$PDK_ROOT" >> $GITHUB_ENV
        echo "PDK=$PDK" >> $GITHUB_ENV

        echo "=== $GITHUB_ENV"
        cat $GITHUB_ENV

    # Install librsvg2-bin (for rsvg-convert) and pngquant (for heavy PNG compression)
    - name: Install prerequisites
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: librsvg2-bin pngquant
        version: tt04 # I think naming a version builds a reusable packages cache for that name.

    - name: Checkout tt-support-tools repo
      uses: actions/checkout@v3
      with:
        repository: tinytapeout/tt-support-tools
        path: tt
        ref: tt04

    - name: Setup python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip' # caching pip dependencies

    # Thanks: https://github.com/yaml/pyyaml/issues/601#issuecomment-1638509577
    # See: https://github.com/yaml/pyyaml/issues/601
    #
    ## This was just to prove inside GHA this sequence will successfully install pyyaml-5.4.1
    #
    ##
    #- name: 'Hotfix: yyaml + Cython>=3'
    #  shell: bash
    #  run: |
    #    set | grep PYTHON || true
    #    python -VV
    #    python -h
    #
    #     pip install "Cython<3.0" "wheel==0.40.0" "pyinstaller==5.13.0" "pyinstaller-hooks-contrib==2023.5" "install==1.3.5" "setuptools" --no-build-isolation
    #    pip install "mccabe==0.6.1" "mypy-extensions==1.0.0" "pathspec==0.11.1" "platformdirs==3.9.1" "tomli==2.0.1" --no-build-isolation
    #    pip install "XlsxWriter==3.0.9" "altgraph==0.17.3" "black==22.3.0" "click==8.1.5" "cmake==3.26.4" --no-build-isolation
    #    pip install "flake8==4.0.1" "flake8-no-implicit-concat==0.3.3" "pycodestyle==2.8.0" "pyflakes==2.4.0" --no-build-isolation
    #
    #    python -VV
    #
    #    #"pyyaml<6" --no-build-isolation # new line
    #    pip install "pyyaml<6" --no-build-isolation
    #    #pip install -r requirements.txt # original build step, which has pyyaml in it

    - name: Install tt-support-tools dependencies
      shell: bash
      run: pip install -r tt/requirements.txt

    - name: Fetch verilog and build config
      shell: bash
      run: ./tt/tt_tool.py --create-user-config

    - name: Install OpenLane
      shell: bash
      run: |
        git clone --depth=1 --branch $OPENLANE_TAG https://github.com/The-OpenROAD-Project/OpenLane.git $OPENLANE_ROOT
        cd $OPENLANE_ROOT

        # I expect this issue to be resolved in the future by OpenLane by moving forward to PyYaml 6.x
        if test -f dependencies/python/run_time.txt && egrep -sqi "pyyaml.*=.*5.4[0-9\.]*$" dependencies/python/run_time.txt
        then
          PATCH_FILENAME="openlane_2023.06.26.patch"
          curl -s -o ./${PATCH_FILENAME} "https://raw.githubusercontent.com/dlmiles/tt-gds-action/tt04/${PATCH_FILENAME}"
          if patch -p1 --dry-run < ./${PATCH_FILENAME}
          then
            echo "### PATCHING: $PATCH_FILENAME"
            patch -p1 < ./${PATCH_FILENAME}

            curl -s -o ./hotfix_pyyaml.sh "https://raw.githubusercontent.com/dlmiles/tt-gds-action/tt04/hotfix_pyyaml.sh"
            chmod a+x hotfix_pyyaml.sh
          elif [ "$OPENLANE_TAG" = "2023.06.26" ]
          then
            echo "$0: Unable to patch OPENLANE_TAG=$OPENLANE_TAG with ./${PATCH_FILENAME}"
            echo "=== ./${PATCH_FILENAME} :"
            cat "./${PATCH_FILENAME}"
            exit 1
          fi
        fi

        make

    - name: Make GDS with OpenLane
      shell: bash
      run: ./tt/tt_tool.py --harden

    - name: Show build files (for debugging)
      shell: bash
      run: find runs/wokwi/

    - name: Yosys warnings
      shell: bash
      run: ./tt/tt_tool.py --print-warnings >> $GITHUB_STEP_SUMMARY

    - name: Routing summary
      shell: bash
      run: ./tt/tt_tool.py --print-stats >> $GITHUB_STEP_SUMMARY

    - name: Cell usage summary
      shell: bash
      run: ./tt/tt_tool.py --print-cell-category >> $GITHUB_STEP_SUMMARY

    - name: Publish build logs
      if: success() || failure()
      uses: actions/upload-artifact@v3
      with:
        name: GDS_logs
        path: |
          src/*
          runs/wokwi/*

    - name: Publish GDS artifacts
      uses: actions/upload-artifact@v3
      with:
        name: GDS
        path: |
          src/*
          runs/wokwi/results/final/*
          runs/wokwi/reports/metrics.csv
          runs/wokwi/reports/synthesis/1-synthesis*

    # Create and store PNG...
    - name: Render SVG from GDS
      shell: bash
      run: ./tt/tt_tool.py --create-svg

    - name: Convert SVG to PNG
      shell: bash
      #NOTE: We avoid a cluttered labels mess by telling rsvg-convert to apply extra CSS that hides
      # all text. Since -s expects a CSS *file*, we instead pass it "<(echo 'text{display:none;}')"
      # which effectively creates a temporary/transient file that appears to contain the CSS we want:
      run: rsvg-convert --unlimited gds_render.svg -s <(echo 'text{display:none;}') -o gds_render_png24.png --no-keep-image-data

    - name: Shrink PNG
      shell: bash
      run: pngquant --quality 10-30 --speed 1 --nofs --strip --output gds_render.png gds_render_png24.png

    - name: Upload gds_render (png) artifact
      uses: actions/upload-artifact@v3
      with:
        name: gds_render
        path: 'gds_render.png'
